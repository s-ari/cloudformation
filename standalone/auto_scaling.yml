AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create AWS resources EC2, Auto Scale, VPC(Public subnet/Private subnet), IAM Role

# Edit parameters.
Parameters:
  Prefix:
    Type: "String"
    Default: ""
  ImageId:
    Type: "String"
    Default: ""
  KeyName:
    Type: "String"
    Default: ""
  AllowSsh:
    Type: "String"
    Default: ""
  InstanceType:
    Type: "String"
    Default: ""
  VpcCidrBlock:
    Type: "String"
    Default: ""
  PublicSubnetCidrBlock1a:
    Type: "String"
    Default: ""
  PublicSubnetCidrBlock1c:
    Type: "String"
    Default: ""
  PrivateSubnetCidrBlock1a:
    Type: "String"
    Default: ""
  PrivateSubnetCidrBlock1c:
    Type: "String"
    Default: ""

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, VPC ] ]

  # Public Subnet AZ1a
  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: PublicSubnetCidrBlock1a
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: "AWS::Region"
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, PublicSubnet1a ] ]

  # Public Subnet AZ1c
  PublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: PublicSubnetCidrBlock1c
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: "AWS::Region"
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, PublicSubnet1c ] ]

  # Private Subnet AZ1a
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: PrivateSubnetCidrBlock1a
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: "AWS::Region"
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, PrivateSubnet1a ] ]

  # Private Subnet AZ1c
  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: PrivateSubnetCidrBlock1c
      AvailabilityZone:
        Fn::Select:
        - 1 
        - Fn::GetAZs:
            Ref: "AWS::Region"
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, PrivateSubnet1c ] ]

  # Gateway
  Gateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, Gateway ] ]

  # Attach gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: Gateway

  # Route table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, RouteTable ] ]

  # Route
  Route:
    Type: AWS::EC2::Route
    DependsOn: Gateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: Gateway

  # Subnet AZ1a route table association
  PublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1a
      RouteTableId:
        Ref: RouteTable

  # Subnet AZ1c route table association
  PublicSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1c
      RouteTableId:
        Ref: RouteTable

  # Security group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: AllowSsh
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, SecurityGroup ] ]

  # Role
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "s3:List*"
          Resource: "*"
      Roles:
      - !Ref Role
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref Role

  # Auto scaling launch config
  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: ImageId
      SecurityGroups:
      - Ref: SecurityGroup
      InstanceType:
        Ref: InstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 8
          VolumeType: gp2
          DeleteOnTermination: true
      IamInstanceProfile:
        Ref: InstanceProfile

  # Auto scaling group
  ServerGroupMq: 
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties: 
      VPCZoneIdentifier:
      - Ref: PublicSubnet1a
      - Ref: PublicSubnet1c
      LaunchConfigurationName: 
        Ref: LaunchConfig
      MinSize: "1"
      MaxSize: "1"
      Tags:
      - Key: Name
        Value:
          Fn::Join: [ -, [ Ref: Prefix, instance ] ]
        PropagateAtLaunch: true
